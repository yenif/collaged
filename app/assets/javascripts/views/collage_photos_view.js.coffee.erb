class window.CollagePhotosView extends Backbone.View
  tagName: "div"
  className: "collage-photos"
  events: {
  }
    #top, left

  grid_width = 15
  grid_x_inc = 100
  grid_y_inc = 100

  initialize: ->
    @collection.bind('add', this.add_photo, this)
    @collection.bind('reset', this.render, this)
    @collection.view = this

  y_offset = 0
  x = 0
  grid = []
  add_photo: (photo) =>
    photo_view = photo.view || new PhotoView({model: photo})

    while true
      if x >= grid_width
        x = 0
        grid.shift()
        y_offset++

      unless grid[0]?
        (grid[0] = []).length = grid_width

      overlap = false
      for i in [0...(if photo.width() <= grid_width then photo.width() else grid_width)] when i + x >= grid_width || grid[0][x+i]
        overlap = true

      unless overlap
        $(@el).append photo_view.render({
          x: x * grid_x_inc,
          y: y_offset * grid_y_inc,
          w: photo.width() * grid_x_inc,
          h: photo.height() * grid_y_inc
        }).el
        $(@el).css({height: (y_offset + grid.length) * grid_y_inc})

        for y in [0...photo.height()]
          unless grid[y]?
            (grid[y] = []).length = grid_width
          grid[y][x] = true

          for k in [0...photo.width()] when k + x < grid[y].length
            grid[y][x+k] = true
        # end

        x += photo.width()
        return photo_view
      else
        x += 1
    # If we get here something went wrong
    return false

  reset_grid: =>
    y_offset = 0
    x = 0
    grid = []
    $(@el).empty().css({position: 'relative', width: grid_width, height: 100})


  render: =>
    this.reset_grid()
    photo_views = @collection.map (photo) =>
      this.add_photo(photo)

    return this
