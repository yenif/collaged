class window.CollagePhotosView extends Backbone.View
  tagName: "div"
  className: "collage-photos"
  padding: 10
  events: {
  }
    #top, left

  grid_width = 8
  grid_x_inc = 100
  grid_y_inc = 100

  initialize: ->
    @collection.bind('add', this.add_photo, this)
    @collection.bind('reset', this.render, this)
    @collection.view = this

  handle_resize: (view, callback) =>
    origin = $(view.el).offset()
    $(this.el).unbind('mousemove')
    $(document).mousemove (e) =>
      e.preventDefault()

      x = Math.round((e.pageX - origin.left)/grid_x_inc)
      y = Math.round((e.pageY - origin.top)/grid_y_inc)

      # currently don't support resize to the upper left
      if x < 1
        x = 1
      if y < 1
        y = 1

      if x != view.model.width() || y != view.model.height()
        view.model.width(x)
        view.model.height(y)
        @render()

      console.log(x + ',' + y)

    $(document).mouseup (f) =>
      f.preventDefault()
      $(document).unbind('mousemove')
      callback(f)

    return true

  handle_move: (view,callback) =>
    $(this.el).unbind('mousemove')
    $(this.el).mousemove (e) =>
      e.preventDefault()
      console.log(e.pageX + ',' + e.pageY)

    $(document).mouseup (f) =>
      f.preventDefault()
      $(this.el).unbind('mousemove')
      callback(f)

    return true

  y_offset = 0
  x = 0
  grid = []
  add_photo: (photo) =>
    if photo.view?
      photo_view = photo.view
    else
      photo_view = new PhotoView({grid_inc: {grid_x_inc, grid_y_inc}, model: photo, parent: this})
      photo_view.bind("resize", @handle_resize)
      photo_view.bind("move", @handle_move)

    while true
      if x >= grid_width
        x = 0
        grid.shift()
        y_offset++

      unless grid[0]?
        (grid[0] = []).length = grid_width

      overlap = false
      for i in [0...(if photo.width() <= grid_width then photo.width() else grid_width)] when i + x >= grid_width || grid[0][x+i]
        overlap = true

      unless overlap
        $(@el).append photo_view.render({
          x: x * grid_x_inc + @padding,
          y: y_offset * grid_y_inc + @padding,
          w: photo.width() * grid_x_inc,
          h: photo.height() * grid_y_inc
        }).el
        $(@el).css({height: (y_offset + grid.length) * grid_y_inc})

        for y in [0...photo.height()]
          unless grid[y]?
            (grid[y] = []).length = grid_width
          grid[y][x] = true

          for k in [0...photo.width()] when k + x < grid[y].length
            grid[y][x+k] = true

        x += photo.width()
        return photo_view
      else
        x += 1
    # If we get here something went wrong
    return false

  reset_grid: =>
    y_offset = 0
    x = 0
    grid = []
    $(@el).children().detach()
    $(@el).css({position: 'relative', height: 100})


  render: =>
    grid_width = Math.floor(($(this.el).width()) / grid_x_inc)
    this.reset_grid()
    photo_views = @collection.map (photo) =>
      this.add_photo(photo)

    return this
